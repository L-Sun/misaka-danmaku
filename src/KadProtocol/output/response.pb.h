// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: response.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_response_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_response_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_response_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_response_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_response_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_response_2eproto_metadata_getter(int index);
class FindNodeResponse;
struct FindNodeResponseDefaultTypeInternal;
extern FindNodeResponseDefaultTypeInternal _FindNodeResponse_default_instance_;
class FindNodeResponse_NodeInfo;
struct FindNodeResponse_NodeInfoDefaultTypeInternal;
extern FindNodeResponse_NodeInfoDefaultTypeInternal _FindNodeResponse_NodeInfo_default_instance_;
class FindValueResponse;
struct FindValueResponseDefaultTypeInternal;
extern FindValueResponseDefaultTypeInternal _FindValueResponse_default_instance_;
class FindValueResponse_Data;
struct FindValueResponse_DataDefaultTypeInternal;
extern FindValueResponse_DataDefaultTypeInternal _FindValueResponse_Data_default_instance_;
class PingResponse;
struct PingResponseDefaultTypeInternal;
extern PingResponseDefaultTypeInternal _PingResponse_default_instance_;
class Response;
struct ResponseDefaultTypeInternal;
extern ResponseDefaultTypeInternal _Response_default_instance_;
class StoreResponse;
struct StoreResponseDefaultTypeInternal;
extern StoreResponseDefaultTypeInternal _StoreResponse_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::FindNodeResponse* Arena::CreateMaybeMessage<::FindNodeResponse>(Arena*);
template<> ::FindNodeResponse_NodeInfo* Arena::CreateMaybeMessage<::FindNodeResponse_NodeInfo>(Arena*);
template<> ::FindValueResponse* Arena::CreateMaybeMessage<::FindValueResponse>(Arena*);
template<> ::FindValueResponse_Data* Arena::CreateMaybeMessage<::FindValueResponse_Data>(Arena*);
template<> ::PingResponse* Arena::CreateMaybeMessage<::PingResponse>(Arena*);
template<> ::Response* Arena::CreateMaybeMessage<::Response>(Arena*);
template<> ::StoreResponse* Arena::CreateMaybeMessage<::StoreResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum PingResponse_State : int {
  PingResponse_State_RUNNING = 0,
  PingResponse_State_BUSY = 1,
  PingResponse_State_REJECT = 2,
  PingResponse_State_PingResponse_State_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  PingResponse_State_PingResponse_State_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool PingResponse_State_IsValid(int value);
constexpr PingResponse_State PingResponse_State_State_MIN = PingResponse_State_RUNNING;
constexpr PingResponse_State PingResponse_State_State_MAX = PingResponse_State_REJECT;
constexpr int PingResponse_State_State_ARRAYSIZE = PingResponse_State_State_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PingResponse_State_descriptor();
template<typename T>
inline const std::string& PingResponse_State_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PingResponse_State>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PingResponse_State_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PingResponse_State_descriptor(), enum_t_value);
}
inline bool PingResponse_State_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PingResponse_State* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PingResponse_State>(
    PingResponse_State_descriptor(), name, value);
}
enum StoreResponse_State : int {
  StoreResponse_State_SUCCESS = 0,
  StoreResponse_State_FAILED = 1,
  StoreResponse_State_StoreResponse_State_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  StoreResponse_State_StoreResponse_State_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool StoreResponse_State_IsValid(int value);
constexpr StoreResponse_State StoreResponse_State_State_MIN = StoreResponse_State_SUCCESS;
constexpr StoreResponse_State StoreResponse_State_State_MAX = StoreResponse_State_FAILED;
constexpr int StoreResponse_State_State_ARRAYSIZE = StoreResponse_State_State_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StoreResponse_State_descriptor();
template<typename T>
inline const std::string& StoreResponse_State_Name(T enum_t_value) {
  static_assert(::std::is_same<T, StoreResponse_State>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function StoreResponse_State_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    StoreResponse_State_descriptor(), enum_t_value);
}
inline bool StoreResponse_State_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, StoreResponse_State* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<StoreResponse_State>(
    StoreResponse_State_descriptor(), name, value);
}
// ===================================================================

class Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Response) */ {
 public:
  inline Response() : Response(nullptr) {}
  virtual ~Response();
  explicit constexpr Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Response(const Response& from);
  Response(Response&& from) noexcept
    : Response() {
    *this = ::std::move(from);
  }

  inline Response& operator=(const Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline Response& operator=(Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Response& default_instance() {
    return *internal_default_instance();
  }
  enum ResponseCase {
    kPing = 2,
    kStore = 3,
    kFindNode = 4,
    kFindValue = 5,
    RESPONSE_NOT_SET = 0,
  };

  static inline const Response* internal_default_instance() {
    return reinterpret_cast<const Response*>(
               &_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Response& a, Response& b) {
    a.Swap(&b);
  }
  inline void Swap(Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Response* New() const final {
    return CreateMaybeMessage<Response>(nullptr);
  }

  Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Response& from);
  void MergeFrom(const Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Response";
  }
  protected:
  explicit Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_response_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOriginIDFieldNumber = 1,
    kPingFieldNumber = 2,
    kStoreFieldNumber = 3,
    kFindNodeFieldNumber = 4,
    kFindValueFieldNumber = 5,
  };
  // bytes originID = 1;
  void clear_originid();
  const std::string& originid() const;
  void set_originid(const std::string& value);
  void set_originid(std::string&& value);
  void set_originid(const char* value);
  void set_originid(const void* value, size_t size);
  std::string* mutable_originid();
  std::string* release_originid();
  void set_allocated_originid(std::string* originid);
  private:
  const std::string& _internal_originid() const;
  void _internal_set_originid(const std::string& value);
  std::string* _internal_mutable_originid();
  public:

  // .PingResponse ping = 2;
  bool has_ping() const;
  private:
  bool _internal_has_ping() const;
  public:
  void clear_ping();
  const ::PingResponse& ping() const;
  ::PingResponse* release_ping();
  ::PingResponse* mutable_ping();
  void set_allocated_ping(::PingResponse* ping);
  private:
  const ::PingResponse& _internal_ping() const;
  ::PingResponse* _internal_mutable_ping();
  public:
  void unsafe_arena_set_allocated_ping(
      ::PingResponse* ping);
  ::PingResponse* unsafe_arena_release_ping();

  // .StoreResponse store = 3;
  bool has_store() const;
  private:
  bool _internal_has_store() const;
  public:
  void clear_store();
  const ::StoreResponse& store() const;
  ::StoreResponse* release_store();
  ::StoreResponse* mutable_store();
  void set_allocated_store(::StoreResponse* store);
  private:
  const ::StoreResponse& _internal_store() const;
  ::StoreResponse* _internal_mutable_store();
  public:
  void unsafe_arena_set_allocated_store(
      ::StoreResponse* store);
  ::StoreResponse* unsafe_arena_release_store();

  // .FindNodeResponse findNode = 4;
  bool has_findnode() const;
  private:
  bool _internal_has_findnode() const;
  public:
  void clear_findnode();
  const ::FindNodeResponse& findnode() const;
  ::FindNodeResponse* release_findnode();
  ::FindNodeResponse* mutable_findnode();
  void set_allocated_findnode(::FindNodeResponse* findnode);
  private:
  const ::FindNodeResponse& _internal_findnode() const;
  ::FindNodeResponse* _internal_mutable_findnode();
  public:
  void unsafe_arena_set_allocated_findnode(
      ::FindNodeResponse* findnode);
  ::FindNodeResponse* unsafe_arena_release_findnode();

  // .FindValueResponse findValue = 5;
  bool has_findvalue() const;
  private:
  bool _internal_has_findvalue() const;
  public:
  void clear_findvalue();
  const ::FindValueResponse& findvalue() const;
  ::FindValueResponse* release_findvalue();
  ::FindValueResponse* mutable_findvalue();
  void set_allocated_findvalue(::FindValueResponse* findvalue);
  private:
  const ::FindValueResponse& _internal_findvalue() const;
  ::FindValueResponse* _internal_mutable_findvalue();
  public:
  void unsafe_arena_set_allocated_findvalue(
      ::FindValueResponse* findvalue);
  ::FindValueResponse* unsafe_arena_release_findvalue();

  void clear_response();
  ResponseCase response_case() const;
  // @@protoc_insertion_point(class_scope:Response)
 private:
  class _Internal;
  void set_has_ping();
  void set_has_store();
  void set_has_findnode();
  void set_has_findvalue();

  inline bool has_response() const;
  inline void clear_has_response();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr originid_;
  union ResponseUnion {
    constexpr ResponseUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::PingResponse* ping_;
    ::StoreResponse* store_;
    ::FindNodeResponse* findnode_;
    ::FindValueResponse* findvalue_;
  } response_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_response_2eproto;
};
// -------------------------------------------------------------------

class PingResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PingResponse) */ {
 public:
  inline PingResponse() : PingResponse(nullptr) {}
  virtual ~PingResponse();
  explicit constexpr PingResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PingResponse(const PingResponse& from);
  PingResponse(PingResponse&& from) noexcept
    : PingResponse() {
    *this = ::std::move(from);
  }

  inline PingResponse& operator=(const PingResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PingResponse& operator=(PingResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PingResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const PingResponse* internal_default_instance() {
    return reinterpret_cast<const PingResponse*>(
               &_PingResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PingResponse& a, PingResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PingResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PingResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PingResponse* New() const final {
    return CreateMaybeMessage<PingResponse>(nullptr);
  }

  PingResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PingResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PingResponse& from);
  void MergeFrom(const PingResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PingResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PingResponse";
  }
  protected:
  explicit PingResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_response_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef PingResponse_State State;
  static constexpr State RUNNING =
    PingResponse_State_RUNNING;
  static constexpr State BUSY =
    PingResponse_State_BUSY;
  static constexpr State REJECT =
    PingResponse_State_REJECT;
  static inline bool State_IsValid(int value) {
    return PingResponse_State_IsValid(value);
  }
  static constexpr State State_MIN =
    PingResponse_State_State_MIN;
  static constexpr State State_MAX =
    PingResponse_State_State_MAX;
  static constexpr int State_ARRAYSIZE =
    PingResponse_State_State_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  State_descriptor() {
    return PingResponse_State_descriptor();
  }
  template<typename T>
  static inline const std::string& State_Name(T enum_t_value) {
    static_assert(::std::is_same<T, State>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function State_Name.");
    return PingResponse_State_Name(enum_t_value);
  }
  static inline bool State_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      State* value) {
    return PingResponse_State_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kStateFieldNumber = 1,
  };
  // .PingResponse.State state = 1;
  void clear_state();
  ::PingResponse_State state() const;
  void set_state(::PingResponse_State value);
  private:
  ::PingResponse_State _internal_state() const;
  void _internal_set_state(::PingResponse_State value);
  public:

  // @@protoc_insertion_point(class_scope:PingResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_response_2eproto;
};
// -------------------------------------------------------------------

class StoreResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:StoreResponse) */ {
 public:
  inline StoreResponse() : StoreResponse(nullptr) {}
  virtual ~StoreResponse();
  explicit constexpr StoreResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StoreResponse(const StoreResponse& from);
  StoreResponse(StoreResponse&& from) noexcept
    : StoreResponse() {
    *this = ::std::move(from);
  }

  inline StoreResponse& operator=(const StoreResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline StoreResponse& operator=(StoreResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StoreResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const StoreResponse* internal_default_instance() {
    return reinterpret_cast<const StoreResponse*>(
               &_StoreResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(StoreResponse& a, StoreResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(StoreResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StoreResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StoreResponse* New() const final {
    return CreateMaybeMessage<StoreResponse>(nullptr);
  }

  StoreResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StoreResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StoreResponse& from);
  void MergeFrom(const StoreResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StoreResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "StoreResponse";
  }
  protected:
  explicit StoreResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_response_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef StoreResponse_State State;
  static constexpr State SUCCESS =
    StoreResponse_State_SUCCESS;
  static constexpr State FAILED =
    StoreResponse_State_FAILED;
  static inline bool State_IsValid(int value) {
    return StoreResponse_State_IsValid(value);
  }
  static constexpr State State_MIN =
    StoreResponse_State_State_MIN;
  static constexpr State State_MAX =
    StoreResponse_State_State_MAX;
  static constexpr int State_ARRAYSIZE =
    StoreResponse_State_State_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  State_descriptor() {
    return StoreResponse_State_descriptor();
  }
  template<typename T>
  static inline const std::string& State_Name(T enum_t_value) {
    static_assert(::std::is_same<T, State>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function State_Name.");
    return StoreResponse_State_Name(enum_t_value);
  }
  static inline bool State_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      State* value) {
    return StoreResponse_State_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kStateFieldNumber = 1,
  };
  // .StoreResponse.State state = 1;
  void clear_state();
  ::StoreResponse_State state() const;
  void set_state(::StoreResponse_State value);
  private:
  ::StoreResponse_State _internal_state() const;
  void _internal_set_state(::StoreResponse_State value);
  public:

  // @@protoc_insertion_point(class_scope:StoreResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_response_2eproto;
};
// -------------------------------------------------------------------

class FindNodeResponse_NodeInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FindNodeResponse.NodeInfo) */ {
 public:
  inline FindNodeResponse_NodeInfo() : FindNodeResponse_NodeInfo(nullptr) {}
  virtual ~FindNodeResponse_NodeInfo();
  explicit constexpr FindNodeResponse_NodeInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FindNodeResponse_NodeInfo(const FindNodeResponse_NodeInfo& from);
  FindNodeResponse_NodeInfo(FindNodeResponse_NodeInfo&& from) noexcept
    : FindNodeResponse_NodeInfo() {
    *this = ::std::move(from);
  }

  inline FindNodeResponse_NodeInfo& operator=(const FindNodeResponse_NodeInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline FindNodeResponse_NodeInfo& operator=(FindNodeResponse_NodeInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FindNodeResponse_NodeInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const FindNodeResponse_NodeInfo* internal_default_instance() {
    return reinterpret_cast<const FindNodeResponse_NodeInfo*>(
               &_FindNodeResponse_NodeInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(FindNodeResponse_NodeInfo& a, FindNodeResponse_NodeInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(FindNodeResponse_NodeInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FindNodeResponse_NodeInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FindNodeResponse_NodeInfo* New() const final {
    return CreateMaybeMessage<FindNodeResponse_NodeInfo>(nullptr);
  }

  FindNodeResponse_NodeInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FindNodeResponse_NodeInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FindNodeResponse_NodeInfo& from);
  void MergeFrom(const FindNodeResponse_NodeInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FindNodeResponse_NodeInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FindNodeResponse.NodeInfo";
  }
  protected:
  explicit FindNodeResponse_NodeInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_response_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kAddressFieldNumber = 2,
    kPortFieldNumber = 3,
  };
  // bytes id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const void* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // bytes address = 2;
  void clear_address();
  const std::string& address() const;
  void set_address(const std::string& value);
  void set_address(std::string&& value);
  void set_address(const char* value);
  void set_address(const void* value, size_t size);
  std::string* mutable_address();
  std::string* release_address();
  void set_allocated_address(std::string* address);
  private:
  const std::string& _internal_address() const;
  void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // uint32 port = 3;
  void clear_port();
  ::PROTOBUF_NAMESPACE_ID::uint32 port() const;
  void set_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_port() const;
  void _internal_set_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:FindNodeResponse.NodeInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  ::PROTOBUF_NAMESPACE_ID::uint32 port_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_response_2eproto;
};
// -------------------------------------------------------------------

class FindNodeResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FindNodeResponse) */ {
 public:
  inline FindNodeResponse() : FindNodeResponse(nullptr) {}
  virtual ~FindNodeResponse();
  explicit constexpr FindNodeResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FindNodeResponse(const FindNodeResponse& from);
  FindNodeResponse(FindNodeResponse&& from) noexcept
    : FindNodeResponse() {
    *this = ::std::move(from);
  }

  inline FindNodeResponse& operator=(const FindNodeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline FindNodeResponse& operator=(FindNodeResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FindNodeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const FindNodeResponse* internal_default_instance() {
    return reinterpret_cast<const FindNodeResponse*>(
               &_FindNodeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(FindNodeResponse& a, FindNodeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(FindNodeResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FindNodeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FindNodeResponse* New() const final {
    return CreateMaybeMessage<FindNodeResponse>(nullptr);
  }

  FindNodeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FindNodeResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FindNodeResponse& from);
  void MergeFrom(const FindNodeResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FindNodeResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FindNodeResponse";
  }
  protected:
  explicit FindNodeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_response_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef FindNodeResponse_NodeInfo NodeInfo;

  // accessors -------------------------------------------------------

  enum : int {
    kNodesFieldNumber = 1,
  };
  // repeated .FindNodeResponse.NodeInfo nodes = 1;
  int nodes_size() const;
  private:
  int _internal_nodes_size() const;
  public:
  void clear_nodes();
  ::FindNodeResponse_NodeInfo* mutable_nodes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::FindNodeResponse_NodeInfo >*
      mutable_nodes();
  private:
  const ::FindNodeResponse_NodeInfo& _internal_nodes(int index) const;
  ::FindNodeResponse_NodeInfo* _internal_add_nodes();
  public:
  const ::FindNodeResponse_NodeInfo& nodes(int index) const;
  ::FindNodeResponse_NodeInfo* add_nodes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::FindNodeResponse_NodeInfo >&
      nodes() const;

  // @@protoc_insertion_point(class_scope:FindNodeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::FindNodeResponse_NodeInfo > nodes_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_response_2eproto;
};
// -------------------------------------------------------------------

class FindValueResponse_Data PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FindValueResponse.Data) */ {
 public:
  inline FindValueResponse_Data() : FindValueResponse_Data(nullptr) {}
  virtual ~FindValueResponse_Data();
  explicit constexpr FindValueResponse_Data(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FindValueResponse_Data(const FindValueResponse_Data& from);
  FindValueResponse_Data(FindValueResponse_Data&& from) noexcept
    : FindValueResponse_Data() {
    *this = ::std::move(from);
  }

  inline FindValueResponse_Data& operator=(const FindValueResponse_Data& from) {
    CopyFrom(from);
    return *this;
  }
  inline FindValueResponse_Data& operator=(FindValueResponse_Data&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FindValueResponse_Data& default_instance() {
    return *internal_default_instance();
  }
  static inline const FindValueResponse_Data* internal_default_instance() {
    return reinterpret_cast<const FindValueResponse_Data*>(
               &_FindValueResponse_Data_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(FindValueResponse_Data& a, FindValueResponse_Data& b) {
    a.Swap(&b);
  }
  inline void Swap(FindValueResponse_Data* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FindValueResponse_Data* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FindValueResponse_Data* New() const final {
    return CreateMaybeMessage<FindValueResponse_Data>(nullptr);
  }

  FindValueResponse_Data* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FindValueResponse_Data>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FindValueResponse_Data& from);
  void MergeFrom(const FindValueResponse_Data& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FindValueResponse_Data* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FindValueResponse.Data";
  }
  protected:
  explicit FindValueResponse_Data(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_response_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // bytes key = 1;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const void* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // bytes value = 2;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:FindValueResponse.Data)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_response_2eproto;
};
// -------------------------------------------------------------------

class FindValueResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FindValueResponse) */ {
 public:
  inline FindValueResponse() : FindValueResponse(nullptr) {}
  virtual ~FindValueResponse();
  explicit constexpr FindValueResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FindValueResponse(const FindValueResponse& from);
  FindValueResponse(FindValueResponse&& from) noexcept
    : FindValueResponse() {
    *this = ::std::move(from);
  }

  inline FindValueResponse& operator=(const FindValueResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline FindValueResponse& operator=(FindValueResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FindValueResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const FindValueResponse* internal_default_instance() {
    return reinterpret_cast<const FindValueResponse*>(
               &_FindValueResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(FindValueResponse& a, FindValueResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(FindValueResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FindValueResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FindValueResponse* New() const final {
    return CreateMaybeMessage<FindValueResponse>(nullptr);
  }

  FindValueResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FindValueResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FindValueResponse& from);
  void MergeFrom(const FindValueResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FindValueResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FindValueResponse";
  }
  protected:
  explicit FindValueResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_response_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef FindValueResponse_Data Data;

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // repeated .FindValueResponse.Data data = 1;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  ::FindValueResponse_Data* mutable_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::FindValueResponse_Data >*
      mutable_data();
  private:
  const ::FindValueResponse_Data& _internal_data(int index) const;
  ::FindValueResponse_Data* _internal_add_data();
  public:
  const ::FindValueResponse_Data& data(int index) const;
  ::FindValueResponse_Data* add_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::FindValueResponse_Data >&
      data() const;

  // @@protoc_insertion_point(class_scope:FindValueResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::FindValueResponse_Data > data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_response_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Response

// bytes originID = 1;
inline void Response::clear_originid() {
  originid_.ClearToEmpty();
}
inline const std::string& Response::originid() const {
  // @@protoc_insertion_point(field_get:Response.originID)
  return _internal_originid();
}
inline void Response::set_originid(const std::string& value) {
  _internal_set_originid(value);
  // @@protoc_insertion_point(field_set:Response.originID)
}
inline std::string* Response::mutable_originid() {
  // @@protoc_insertion_point(field_mutable:Response.originID)
  return _internal_mutable_originid();
}
inline const std::string& Response::_internal_originid() const {
  return originid_.Get();
}
inline void Response::_internal_set_originid(const std::string& value) {
  
  originid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Response::set_originid(std::string&& value) {
  
  originid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Response.originID)
}
inline void Response::set_originid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  originid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Response.originID)
}
inline void Response::set_originid(const void* value,
    size_t size) {
  
  originid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Response.originID)
}
inline std::string* Response::_internal_mutable_originid() {
  
  return originid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Response::release_originid() {
  // @@protoc_insertion_point(field_release:Response.originID)
  return originid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Response::set_allocated_originid(std::string* originid) {
  if (originid != nullptr) {
    
  } else {
    
  }
  originid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), originid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Response.originID)
}

// .PingResponse ping = 2;
inline bool Response::_internal_has_ping() const {
  return response_case() == kPing;
}
inline bool Response::has_ping() const {
  return _internal_has_ping();
}
inline void Response::set_has_ping() {
  _oneof_case_[0] = kPing;
}
inline void Response::clear_ping() {
  if (_internal_has_ping()) {
    if (GetArena() == nullptr) {
      delete response_.ping_;
    }
    clear_has_response();
  }
}
inline ::PingResponse* Response::release_ping() {
  // @@protoc_insertion_point(field_release:Response.ping)
  if (_internal_has_ping()) {
    clear_has_response();
      ::PingResponse* temp = response_.ping_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    response_.ping_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::PingResponse& Response::_internal_ping() const {
  return _internal_has_ping()
      ? *response_.ping_
      : reinterpret_cast< ::PingResponse&>(::_PingResponse_default_instance_);
}
inline const ::PingResponse& Response::ping() const {
  // @@protoc_insertion_point(field_get:Response.ping)
  return _internal_ping();
}
inline ::PingResponse* Response::unsafe_arena_release_ping() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Response.ping)
  if (_internal_has_ping()) {
    clear_has_response();
    ::PingResponse* temp = response_.ping_;
    response_.ping_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Response::unsafe_arena_set_allocated_ping(::PingResponse* ping) {
  clear_response();
  if (ping) {
    set_has_ping();
    response_.ping_ = ping;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Response.ping)
}
inline ::PingResponse* Response::_internal_mutable_ping() {
  if (!_internal_has_ping()) {
    clear_response();
    set_has_ping();
    response_.ping_ = CreateMaybeMessage< ::PingResponse >(GetArena());
  }
  return response_.ping_;
}
inline ::PingResponse* Response::mutable_ping() {
  // @@protoc_insertion_point(field_mutable:Response.ping)
  return _internal_mutable_ping();
}

// .StoreResponse store = 3;
inline bool Response::_internal_has_store() const {
  return response_case() == kStore;
}
inline bool Response::has_store() const {
  return _internal_has_store();
}
inline void Response::set_has_store() {
  _oneof_case_[0] = kStore;
}
inline void Response::clear_store() {
  if (_internal_has_store()) {
    if (GetArena() == nullptr) {
      delete response_.store_;
    }
    clear_has_response();
  }
}
inline ::StoreResponse* Response::release_store() {
  // @@protoc_insertion_point(field_release:Response.store)
  if (_internal_has_store()) {
    clear_has_response();
      ::StoreResponse* temp = response_.store_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    response_.store_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::StoreResponse& Response::_internal_store() const {
  return _internal_has_store()
      ? *response_.store_
      : reinterpret_cast< ::StoreResponse&>(::_StoreResponse_default_instance_);
}
inline const ::StoreResponse& Response::store() const {
  // @@protoc_insertion_point(field_get:Response.store)
  return _internal_store();
}
inline ::StoreResponse* Response::unsafe_arena_release_store() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Response.store)
  if (_internal_has_store()) {
    clear_has_response();
    ::StoreResponse* temp = response_.store_;
    response_.store_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Response::unsafe_arena_set_allocated_store(::StoreResponse* store) {
  clear_response();
  if (store) {
    set_has_store();
    response_.store_ = store;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Response.store)
}
inline ::StoreResponse* Response::_internal_mutable_store() {
  if (!_internal_has_store()) {
    clear_response();
    set_has_store();
    response_.store_ = CreateMaybeMessage< ::StoreResponse >(GetArena());
  }
  return response_.store_;
}
inline ::StoreResponse* Response::mutable_store() {
  // @@protoc_insertion_point(field_mutable:Response.store)
  return _internal_mutable_store();
}

// .FindNodeResponse findNode = 4;
inline bool Response::_internal_has_findnode() const {
  return response_case() == kFindNode;
}
inline bool Response::has_findnode() const {
  return _internal_has_findnode();
}
inline void Response::set_has_findnode() {
  _oneof_case_[0] = kFindNode;
}
inline void Response::clear_findnode() {
  if (_internal_has_findnode()) {
    if (GetArena() == nullptr) {
      delete response_.findnode_;
    }
    clear_has_response();
  }
}
inline ::FindNodeResponse* Response::release_findnode() {
  // @@protoc_insertion_point(field_release:Response.findNode)
  if (_internal_has_findnode()) {
    clear_has_response();
      ::FindNodeResponse* temp = response_.findnode_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    response_.findnode_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::FindNodeResponse& Response::_internal_findnode() const {
  return _internal_has_findnode()
      ? *response_.findnode_
      : reinterpret_cast< ::FindNodeResponse&>(::_FindNodeResponse_default_instance_);
}
inline const ::FindNodeResponse& Response::findnode() const {
  // @@protoc_insertion_point(field_get:Response.findNode)
  return _internal_findnode();
}
inline ::FindNodeResponse* Response::unsafe_arena_release_findnode() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Response.findNode)
  if (_internal_has_findnode()) {
    clear_has_response();
    ::FindNodeResponse* temp = response_.findnode_;
    response_.findnode_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Response::unsafe_arena_set_allocated_findnode(::FindNodeResponse* findnode) {
  clear_response();
  if (findnode) {
    set_has_findnode();
    response_.findnode_ = findnode;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Response.findNode)
}
inline ::FindNodeResponse* Response::_internal_mutable_findnode() {
  if (!_internal_has_findnode()) {
    clear_response();
    set_has_findnode();
    response_.findnode_ = CreateMaybeMessage< ::FindNodeResponse >(GetArena());
  }
  return response_.findnode_;
}
inline ::FindNodeResponse* Response::mutable_findnode() {
  // @@protoc_insertion_point(field_mutable:Response.findNode)
  return _internal_mutable_findnode();
}

// .FindValueResponse findValue = 5;
inline bool Response::_internal_has_findvalue() const {
  return response_case() == kFindValue;
}
inline bool Response::has_findvalue() const {
  return _internal_has_findvalue();
}
inline void Response::set_has_findvalue() {
  _oneof_case_[0] = kFindValue;
}
inline void Response::clear_findvalue() {
  if (_internal_has_findvalue()) {
    if (GetArena() == nullptr) {
      delete response_.findvalue_;
    }
    clear_has_response();
  }
}
inline ::FindValueResponse* Response::release_findvalue() {
  // @@protoc_insertion_point(field_release:Response.findValue)
  if (_internal_has_findvalue()) {
    clear_has_response();
      ::FindValueResponse* temp = response_.findvalue_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    response_.findvalue_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::FindValueResponse& Response::_internal_findvalue() const {
  return _internal_has_findvalue()
      ? *response_.findvalue_
      : reinterpret_cast< ::FindValueResponse&>(::_FindValueResponse_default_instance_);
}
inline const ::FindValueResponse& Response::findvalue() const {
  // @@protoc_insertion_point(field_get:Response.findValue)
  return _internal_findvalue();
}
inline ::FindValueResponse* Response::unsafe_arena_release_findvalue() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Response.findValue)
  if (_internal_has_findvalue()) {
    clear_has_response();
    ::FindValueResponse* temp = response_.findvalue_;
    response_.findvalue_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Response::unsafe_arena_set_allocated_findvalue(::FindValueResponse* findvalue) {
  clear_response();
  if (findvalue) {
    set_has_findvalue();
    response_.findvalue_ = findvalue;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Response.findValue)
}
inline ::FindValueResponse* Response::_internal_mutable_findvalue() {
  if (!_internal_has_findvalue()) {
    clear_response();
    set_has_findvalue();
    response_.findvalue_ = CreateMaybeMessage< ::FindValueResponse >(GetArena());
  }
  return response_.findvalue_;
}
inline ::FindValueResponse* Response::mutable_findvalue() {
  // @@protoc_insertion_point(field_mutable:Response.findValue)
  return _internal_mutable_findvalue();
}

inline bool Response::has_response() const {
  return response_case() != RESPONSE_NOT_SET;
}
inline void Response::clear_has_response() {
  _oneof_case_[0] = RESPONSE_NOT_SET;
}
inline Response::ResponseCase Response::response_case() const {
  return Response::ResponseCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// PingResponse

// .PingResponse.State state = 1;
inline void PingResponse::clear_state() {
  state_ = 0;
}
inline ::PingResponse_State PingResponse::_internal_state() const {
  return static_cast< ::PingResponse_State >(state_);
}
inline ::PingResponse_State PingResponse::state() const {
  // @@protoc_insertion_point(field_get:PingResponse.state)
  return _internal_state();
}
inline void PingResponse::_internal_set_state(::PingResponse_State value) {
  
  state_ = value;
}
inline void PingResponse::set_state(::PingResponse_State value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:PingResponse.state)
}

// -------------------------------------------------------------------

// StoreResponse

// .StoreResponse.State state = 1;
inline void StoreResponse::clear_state() {
  state_ = 0;
}
inline ::StoreResponse_State StoreResponse::_internal_state() const {
  return static_cast< ::StoreResponse_State >(state_);
}
inline ::StoreResponse_State StoreResponse::state() const {
  // @@protoc_insertion_point(field_get:StoreResponse.state)
  return _internal_state();
}
inline void StoreResponse::_internal_set_state(::StoreResponse_State value) {
  
  state_ = value;
}
inline void StoreResponse::set_state(::StoreResponse_State value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:StoreResponse.state)
}

// -------------------------------------------------------------------

// FindNodeResponse_NodeInfo

// bytes id = 1;
inline void FindNodeResponse_NodeInfo::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& FindNodeResponse_NodeInfo::id() const {
  // @@protoc_insertion_point(field_get:FindNodeResponse.NodeInfo.id)
  return _internal_id();
}
inline void FindNodeResponse_NodeInfo::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:FindNodeResponse.NodeInfo.id)
}
inline std::string* FindNodeResponse_NodeInfo::mutable_id() {
  // @@protoc_insertion_point(field_mutable:FindNodeResponse.NodeInfo.id)
  return _internal_mutable_id();
}
inline const std::string& FindNodeResponse_NodeInfo::_internal_id() const {
  return id_.Get();
}
inline void FindNodeResponse_NodeInfo::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void FindNodeResponse_NodeInfo::set_id(std::string&& value) {
  
  id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:FindNodeResponse.NodeInfo.id)
}
inline void FindNodeResponse_NodeInfo::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:FindNodeResponse.NodeInfo.id)
}
inline void FindNodeResponse_NodeInfo::set_id(const void* value,
    size_t size) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:FindNodeResponse.NodeInfo.id)
}
inline std::string* FindNodeResponse_NodeInfo::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* FindNodeResponse_NodeInfo::release_id() {
  // @@protoc_insertion_point(field_release:FindNodeResponse.NodeInfo.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FindNodeResponse_NodeInfo::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:FindNodeResponse.NodeInfo.id)
}

// bytes address = 2;
inline void FindNodeResponse_NodeInfo::clear_address() {
  address_.ClearToEmpty();
}
inline const std::string& FindNodeResponse_NodeInfo::address() const {
  // @@protoc_insertion_point(field_get:FindNodeResponse.NodeInfo.address)
  return _internal_address();
}
inline void FindNodeResponse_NodeInfo::set_address(const std::string& value) {
  _internal_set_address(value);
  // @@protoc_insertion_point(field_set:FindNodeResponse.NodeInfo.address)
}
inline std::string* FindNodeResponse_NodeInfo::mutable_address() {
  // @@protoc_insertion_point(field_mutable:FindNodeResponse.NodeInfo.address)
  return _internal_mutable_address();
}
inline const std::string& FindNodeResponse_NodeInfo::_internal_address() const {
  return address_.Get();
}
inline void FindNodeResponse_NodeInfo::_internal_set_address(const std::string& value) {
  
  address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void FindNodeResponse_NodeInfo::set_address(std::string&& value) {
  
  address_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:FindNodeResponse.NodeInfo.address)
}
inline void FindNodeResponse_NodeInfo::set_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:FindNodeResponse.NodeInfo.address)
}
inline void FindNodeResponse_NodeInfo::set_address(const void* value,
    size_t size) {
  
  address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:FindNodeResponse.NodeInfo.address)
}
inline std::string* FindNodeResponse_NodeInfo::_internal_mutable_address() {
  
  return address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* FindNodeResponse_NodeInfo::release_address() {
  // @@protoc_insertion_point(field_release:FindNodeResponse.NodeInfo.address)
  return address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FindNodeResponse_NodeInfo::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:FindNodeResponse.NodeInfo.address)
}

// uint32 port = 3;
inline void FindNodeResponse_NodeInfo::clear_port() {
  port_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FindNodeResponse_NodeInfo::_internal_port() const {
  return port_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FindNodeResponse_NodeInfo::port() const {
  // @@protoc_insertion_point(field_get:FindNodeResponse.NodeInfo.port)
  return _internal_port();
}
inline void FindNodeResponse_NodeInfo::_internal_set_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  port_ = value;
}
inline void FindNodeResponse_NodeInfo::set_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:FindNodeResponse.NodeInfo.port)
}

// -------------------------------------------------------------------

// FindNodeResponse

// repeated .FindNodeResponse.NodeInfo nodes = 1;
inline int FindNodeResponse::_internal_nodes_size() const {
  return nodes_.size();
}
inline int FindNodeResponse::nodes_size() const {
  return _internal_nodes_size();
}
inline void FindNodeResponse::clear_nodes() {
  nodes_.Clear();
}
inline ::FindNodeResponse_NodeInfo* FindNodeResponse::mutable_nodes(int index) {
  // @@protoc_insertion_point(field_mutable:FindNodeResponse.nodes)
  return nodes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::FindNodeResponse_NodeInfo >*
FindNodeResponse::mutable_nodes() {
  // @@protoc_insertion_point(field_mutable_list:FindNodeResponse.nodes)
  return &nodes_;
}
inline const ::FindNodeResponse_NodeInfo& FindNodeResponse::_internal_nodes(int index) const {
  return nodes_.Get(index);
}
inline const ::FindNodeResponse_NodeInfo& FindNodeResponse::nodes(int index) const {
  // @@protoc_insertion_point(field_get:FindNodeResponse.nodes)
  return _internal_nodes(index);
}
inline ::FindNodeResponse_NodeInfo* FindNodeResponse::_internal_add_nodes() {
  return nodes_.Add();
}
inline ::FindNodeResponse_NodeInfo* FindNodeResponse::add_nodes() {
  // @@protoc_insertion_point(field_add:FindNodeResponse.nodes)
  return _internal_add_nodes();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::FindNodeResponse_NodeInfo >&
FindNodeResponse::nodes() const {
  // @@protoc_insertion_point(field_list:FindNodeResponse.nodes)
  return nodes_;
}

// -------------------------------------------------------------------

// FindValueResponse_Data

// bytes key = 1;
inline void FindValueResponse_Data::clear_key() {
  key_.ClearToEmpty();
}
inline const std::string& FindValueResponse_Data::key() const {
  // @@protoc_insertion_point(field_get:FindValueResponse.Data.key)
  return _internal_key();
}
inline void FindValueResponse_Data::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:FindValueResponse.Data.key)
}
inline std::string* FindValueResponse_Data::mutable_key() {
  // @@protoc_insertion_point(field_mutable:FindValueResponse.Data.key)
  return _internal_mutable_key();
}
inline const std::string& FindValueResponse_Data::_internal_key() const {
  return key_.Get();
}
inline void FindValueResponse_Data::_internal_set_key(const std::string& value) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void FindValueResponse_Data::set_key(std::string&& value) {
  
  key_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:FindValueResponse.Data.key)
}
inline void FindValueResponse_Data::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:FindValueResponse.Data.key)
}
inline void FindValueResponse_Data::set_key(const void* value,
    size_t size) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:FindValueResponse.Data.key)
}
inline std::string* FindValueResponse_Data::_internal_mutable_key() {
  
  return key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* FindValueResponse_Data::release_key() {
  // @@protoc_insertion_point(field_release:FindValueResponse.Data.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FindValueResponse_Data::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:FindValueResponse.Data.key)
}

// bytes value = 2;
inline void FindValueResponse_Data::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& FindValueResponse_Data::value() const {
  // @@protoc_insertion_point(field_get:FindValueResponse.Data.value)
  return _internal_value();
}
inline void FindValueResponse_Data::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:FindValueResponse.Data.value)
}
inline std::string* FindValueResponse_Data::mutable_value() {
  // @@protoc_insertion_point(field_mutable:FindValueResponse.Data.value)
  return _internal_mutable_value();
}
inline const std::string& FindValueResponse_Data::_internal_value() const {
  return value_.Get();
}
inline void FindValueResponse_Data::_internal_set_value(const std::string& value) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void FindValueResponse_Data::set_value(std::string&& value) {
  
  value_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:FindValueResponse.Data.value)
}
inline void FindValueResponse_Data::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:FindValueResponse.Data.value)
}
inline void FindValueResponse_Data::set_value(const void* value,
    size_t size) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:FindValueResponse.Data.value)
}
inline std::string* FindValueResponse_Data::_internal_mutable_value() {
  
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* FindValueResponse_Data::release_value() {
  // @@protoc_insertion_point(field_release:FindValueResponse.Data.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FindValueResponse_Data::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:FindValueResponse.Data.value)
}

// -------------------------------------------------------------------

// FindValueResponse

// repeated .FindValueResponse.Data data = 1;
inline int FindValueResponse::_internal_data_size() const {
  return data_.size();
}
inline int FindValueResponse::data_size() const {
  return _internal_data_size();
}
inline void FindValueResponse::clear_data() {
  data_.Clear();
}
inline ::FindValueResponse_Data* FindValueResponse::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:FindValueResponse.data)
  return data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::FindValueResponse_Data >*
FindValueResponse::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:FindValueResponse.data)
  return &data_;
}
inline const ::FindValueResponse_Data& FindValueResponse::_internal_data(int index) const {
  return data_.Get(index);
}
inline const ::FindValueResponse_Data& FindValueResponse::data(int index) const {
  // @@protoc_insertion_point(field_get:FindValueResponse.data)
  return _internal_data(index);
}
inline ::FindValueResponse_Data* FindValueResponse::_internal_add_data() {
  return data_.Add();
}
inline ::FindValueResponse_Data* FindValueResponse::add_data() {
  // @@protoc_insertion_point(field_add:FindValueResponse.data)
  return _internal_add_data();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::FindValueResponse_Data >&
FindValueResponse::data() const {
  // @@protoc_insertion_point(field_list:FindValueResponse.data)
  return data_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::PingResponse_State> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PingResponse_State>() {
  return ::PingResponse_State_descriptor();
}
template <> struct is_proto_enum< ::StoreResponse_State> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::StoreResponse_State>() {
  return ::StoreResponse_State_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_response_2eproto
