// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: request.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_request_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_request_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_request_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_request_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_request_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_request_2eproto_metadata_getter(int index);
class FindNodeRequest;
struct FindNodeRequestDefaultTypeInternal;
extern FindNodeRequestDefaultTypeInternal _FindNodeRequest_default_instance_;
class FindValueRequest;
struct FindValueRequestDefaultTypeInternal;
extern FindValueRequestDefaultTypeInternal _FindValueRequest_default_instance_;
class PingRequest;
struct PingRequestDefaultTypeInternal;
extern PingRequestDefaultTypeInternal _PingRequest_default_instance_;
class Request;
struct RequestDefaultTypeInternal;
extern RequestDefaultTypeInternal _Request_default_instance_;
class StoreRequest;
struct StoreRequestDefaultTypeInternal;
extern StoreRequestDefaultTypeInternal _StoreRequest_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::FindNodeRequest* Arena::CreateMaybeMessage<::FindNodeRequest>(Arena*);
template<> ::FindValueRequest* Arena::CreateMaybeMessage<::FindValueRequest>(Arena*);
template<> ::PingRequest* Arena::CreateMaybeMessage<::PingRequest>(Arena*);
template<> ::Request* Arena::CreateMaybeMessage<::Request>(Arena*);
template<> ::StoreRequest* Arena::CreateMaybeMessage<::StoreRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Request) */ {
 public:
  inline Request() : Request(nullptr) {}
  virtual ~Request();
  explicit constexpr Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Request(const Request& from);
  Request(Request&& from) noexcept
    : Request() {
    *this = ::std::move(from);
  }

  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline Request& operator=(Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Request& default_instance() {
    return *internal_default_instance();
  }
  enum RequestCase {
    kPing = 2,
    kStore = 3,
    kFindNode = 4,
    kFindValue = 5,
    REQUEST_NOT_SET = 0,
  };

  static inline const Request* internal_default_instance() {
    return reinterpret_cast<const Request*>(
               &_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Request& a, Request& b) {
    a.Swap(&b);
  }
  inline void Swap(Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Request* New() const final {
    return CreateMaybeMessage<Request>(nullptr);
  }

  Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Request& from);
  void MergeFrom(const Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Request";
  }
  protected:
  explicit Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_request_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOriginIDFieldNumber = 1,
    kPingFieldNumber = 2,
    kStoreFieldNumber = 3,
    kFindNodeFieldNumber = 4,
    kFindValueFieldNumber = 5,
  };
  // bytes originID = 1;
  void clear_originid();
  const std::string& originid() const;
  void set_originid(const std::string& value);
  void set_originid(std::string&& value);
  void set_originid(const char* value);
  void set_originid(const void* value, size_t size);
  std::string* mutable_originid();
  std::string* release_originid();
  void set_allocated_originid(std::string* originid);
  private:
  const std::string& _internal_originid() const;
  void _internal_set_originid(const std::string& value);
  std::string* _internal_mutable_originid();
  public:

  // .PingRequest ping = 2;
  bool has_ping() const;
  private:
  bool _internal_has_ping() const;
  public:
  void clear_ping();
  const ::PingRequest& ping() const;
  ::PingRequest* release_ping();
  ::PingRequest* mutable_ping();
  void set_allocated_ping(::PingRequest* ping);
  private:
  const ::PingRequest& _internal_ping() const;
  ::PingRequest* _internal_mutable_ping();
  public:
  void unsafe_arena_set_allocated_ping(
      ::PingRequest* ping);
  ::PingRequest* unsafe_arena_release_ping();

  // .StoreRequest store = 3;
  bool has_store() const;
  private:
  bool _internal_has_store() const;
  public:
  void clear_store();
  const ::StoreRequest& store() const;
  ::StoreRequest* release_store();
  ::StoreRequest* mutable_store();
  void set_allocated_store(::StoreRequest* store);
  private:
  const ::StoreRequest& _internal_store() const;
  ::StoreRequest* _internal_mutable_store();
  public:
  void unsafe_arena_set_allocated_store(
      ::StoreRequest* store);
  ::StoreRequest* unsafe_arena_release_store();

  // .FindNodeRequest findNode = 4;
  bool has_findnode() const;
  private:
  bool _internal_has_findnode() const;
  public:
  void clear_findnode();
  const ::FindNodeRequest& findnode() const;
  ::FindNodeRequest* release_findnode();
  ::FindNodeRequest* mutable_findnode();
  void set_allocated_findnode(::FindNodeRequest* findnode);
  private:
  const ::FindNodeRequest& _internal_findnode() const;
  ::FindNodeRequest* _internal_mutable_findnode();
  public:
  void unsafe_arena_set_allocated_findnode(
      ::FindNodeRequest* findnode);
  ::FindNodeRequest* unsafe_arena_release_findnode();

  // .FindValueRequest findValue = 5;
  bool has_findvalue() const;
  private:
  bool _internal_has_findvalue() const;
  public:
  void clear_findvalue();
  const ::FindValueRequest& findvalue() const;
  ::FindValueRequest* release_findvalue();
  ::FindValueRequest* mutable_findvalue();
  void set_allocated_findvalue(::FindValueRequest* findvalue);
  private:
  const ::FindValueRequest& _internal_findvalue() const;
  ::FindValueRequest* _internal_mutable_findvalue();
  public:
  void unsafe_arena_set_allocated_findvalue(
      ::FindValueRequest* findvalue);
  ::FindValueRequest* unsafe_arena_release_findvalue();

  void clear_request();
  RequestCase request_case() const;
  // @@protoc_insertion_point(class_scope:Request)
 private:
  class _Internal;
  void set_has_ping();
  void set_has_store();
  void set_has_findnode();
  void set_has_findvalue();

  inline bool has_request() const;
  inline void clear_has_request();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr originid_;
  union RequestUnion {
    constexpr RequestUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::PingRequest* ping_;
    ::StoreRequest* store_;
    ::FindNodeRequest* findnode_;
    ::FindValueRequest* findvalue_;
  } request_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_request_2eproto;
};
// -------------------------------------------------------------------

class PingRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PingRequest) */ {
 public:
  inline PingRequest() : PingRequest(nullptr) {}
  virtual ~PingRequest();
  explicit constexpr PingRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PingRequest(const PingRequest& from);
  PingRequest(PingRequest&& from) noexcept
    : PingRequest() {
    *this = ::std::move(from);
  }

  inline PingRequest& operator=(const PingRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PingRequest& operator=(PingRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PingRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PingRequest* internal_default_instance() {
    return reinterpret_cast<const PingRequest*>(
               &_PingRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PingRequest& a, PingRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PingRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PingRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PingRequest* New() const final {
    return CreateMaybeMessage<PingRequest>(nullptr);
  }

  PingRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PingRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PingRequest& from);
  void MergeFrom(const PingRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PingRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PingRequest";
  }
  protected:
  explicit PingRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_request_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlaceholderFieldNumber = 1,
  };
  // int32 _placeholder = 1;
  void clear__placeholder();
  ::PROTOBUF_NAMESPACE_ID::int32 _placeholder() const;
  void set__placeholder(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal__placeholder() const;
  void _internal_set__placeholder(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PingRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 _placeholder_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_request_2eproto;
};
// -------------------------------------------------------------------

class StoreRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:StoreRequest) */ {
 public:
  inline StoreRequest() : StoreRequest(nullptr) {}
  virtual ~StoreRequest();
  explicit constexpr StoreRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StoreRequest(const StoreRequest& from);
  StoreRequest(StoreRequest&& from) noexcept
    : StoreRequest() {
    *this = ::std::move(from);
  }

  inline StoreRequest& operator=(const StoreRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StoreRequest& operator=(StoreRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StoreRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const StoreRequest* internal_default_instance() {
    return reinterpret_cast<const StoreRequest*>(
               &_StoreRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(StoreRequest& a, StoreRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StoreRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StoreRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StoreRequest* New() const final {
    return CreateMaybeMessage<StoreRequest>(nullptr);
  }

  StoreRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StoreRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StoreRequest& from);
  void MergeFrom(const StoreRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StoreRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "StoreRequest";
  }
  protected:
  explicit StoreRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_request_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // bytes key = 1;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const void* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // string value = 2;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:StoreRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_request_2eproto;
};
// -------------------------------------------------------------------

class FindNodeRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FindNodeRequest) */ {
 public:
  inline FindNodeRequest() : FindNodeRequest(nullptr) {}
  virtual ~FindNodeRequest();
  explicit constexpr FindNodeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FindNodeRequest(const FindNodeRequest& from);
  FindNodeRequest(FindNodeRequest&& from) noexcept
    : FindNodeRequest() {
    *this = ::std::move(from);
  }

  inline FindNodeRequest& operator=(const FindNodeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline FindNodeRequest& operator=(FindNodeRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FindNodeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const FindNodeRequest* internal_default_instance() {
    return reinterpret_cast<const FindNodeRequest*>(
               &_FindNodeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(FindNodeRequest& a, FindNodeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(FindNodeRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FindNodeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FindNodeRequest* New() const final {
    return CreateMaybeMessage<FindNodeRequest>(nullptr);
  }

  FindNodeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FindNodeRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FindNodeRequest& from);
  void MergeFrom(const FindNodeRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FindNodeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FindNodeRequest";
  }
  protected:
  explicit FindNodeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_request_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // bytes id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const void* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:FindNodeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_request_2eproto;
};
// -------------------------------------------------------------------

class FindValueRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FindValueRequest) */ {
 public:
  inline FindValueRequest() : FindValueRequest(nullptr) {}
  virtual ~FindValueRequest();
  explicit constexpr FindValueRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FindValueRequest(const FindValueRequest& from);
  FindValueRequest(FindValueRequest&& from) noexcept
    : FindValueRequest() {
    *this = ::std::move(from);
  }

  inline FindValueRequest& operator=(const FindValueRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline FindValueRequest& operator=(FindValueRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FindValueRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const FindValueRequest* internal_default_instance() {
    return reinterpret_cast<const FindValueRequest*>(
               &_FindValueRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(FindValueRequest& a, FindValueRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(FindValueRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FindValueRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FindValueRequest* New() const final {
    return CreateMaybeMessage<FindValueRequest>(nullptr);
  }

  FindValueRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FindValueRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FindValueRequest& from);
  void MergeFrom(const FindValueRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FindValueRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FindValueRequest";
  }
  protected:
  explicit FindValueRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_request_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
  };
  // bytes key = 1;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const void* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // @@protoc_insertion_point(class_scope:FindValueRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_request_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Request

// bytes originID = 1;
inline void Request::clear_originid() {
  originid_.ClearToEmpty();
}
inline const std::string& Request::originid() const {
  // @@protoc_insertion_point(field_get:Request.originID)
  return _internal_originid();
}
inline void Request::set_originid(const std::string& value) {
  _internal_set_originid(value);
  // @@protoc_insertion_point(field_set:Request.originID)
}
inline std::string* Request::mutable_originid() {
  // @@protoc_insertion_point(field_mutable:Request.originID)
  return _internal_mutable_originid();
}
inline const std::string& Request::_internal_originid() const {
  return originid_.Get();
}
inline void Request::_internal_set_originid(const std::string& value) {
  
  originid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Request::set_originid(std::string&& value) {
  
  originid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Request.originID)
}
inline void Request::set_originid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  originid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Request.originID)
}
inline void Request::set_originid(const void* value,
    size_t size) {
  
  originid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Request.originID)
}
inline std::string* Request::_internal_mutable_originid() {
  
  return originid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Request::release_originid() {
  // @@protoc_insertion_point(field_release:Request.originID)
  return originid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Request::set_allocated_originid(std::string* originid) {
  if (originid != nullptr) {
    
  } else {
    
  }
  originid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), originid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Request.originID)
}

// .PingRequest ping = 2;
inline bool Request::_internal_has_ping() const {
  return request_case() == kPing;
}
inline bool Request::has_ping() const {
  return _internal_has_ping();
}
inline void Request::set_has_ping() {
  _oneof_case_[0] = kPing;
}
inline void Request::clear_ping() {
  if (_internal_has_ping()) {
    if (GetArena() == nullptr) {
      delete request_.ping_;
    }
    clear_has_request();
  }
}
inline ::PingRequest* Request::release_ping() {
  // @@protoc_insertion_point(field_release:Request.ping)
  if (_internal_has_ping()) {
    clear_has_request();
      ::PingRequest* temp = request_.ping_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    request_.ping_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::PingRequest& Request::_internal_ping() const {
  return _internal_has_ping()
      ? *request_.ping_
      : reinterpret_cast< ::PingRequest&>(::_PingRequest_default_instance_);
}
inline const ::PingRequest& Request::ping() const {
  // @@protoc_insertion_point(field_get:Request.ping)
  return _internal_ping();
}
inline ::PingRequest* Request::unsafe_arena_release_ping() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Request.ping)
  if (_internal_has_ping()) {
    clear_has_request();
    ::PingRequest* temp = request_.ping_;
    request_.ping_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_ping(::PingRequest* ping) {
  clear_request();
  if (ping) {
    set_has_ping();
    request_.ping_ = ping;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Request.ping)
}
inline ::PingRequest* Request::_internal_mutable_ping() {
  if (!_internal_has_ping()) {
    clear_request();
    set_has_ping();
    request_.ping_ = CreateMaybeMessage< ::PingRequest >(GetArena());
  }
  return request_.ping_;
}
inline ::PingRequest* Request::mutable_ping() {
  // @@protoc_insertion_point(field_mutable:Request.ping)
  return _internal_mutable_ping();
}

// .StoreRequest store = 3;
inline bool Request::_internal_has_store() const {
  return request_case() == kStore;
}
inline bool Request::has_store() const {
  return _internal_has_store();
}
inline void Request::set_has_store() {
  _oneof_case_[0] = kStore;
}
inline void Request::clear_store() {
  if (_internal_has_store()) {
    if (GetArena() == nullptr) {
      delete request_.store_;
    }
    clear_has_request();
  }
}
inline ::StoreRequest* Request::release_store() {
  // @@protoc_insertion_point(field_release:Request.store)
  if (_internal_has_store()) {
    clear_has_request();
      ::StoreRequest* temp = request_.store_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    request_.store_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::StoreRequest& Request::_internal_store() const {
  return _internal_has_store()
      ? *request_.store_
      : reinterpret_cast< ::StoreRequest&>(::_StoreRequest_default_instance_);
}
inline const ::StoreRequest& Request::store() const {
  // @@protoc_insertion_point(field_get:Request.store)
  return _internal_store();
}
inline ::StoreRequest* Request::unsafe_arena_release_store() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Request.store)
  if (_internal_has_store()) {
    clear_has_request();
    ::StoreRequest* temp = request_.store_;
    request_.store_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_store(::StoreRequest* store) {
  clear_request();
  if (store) {
    set_has_store();
    request_.store_ = store;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Request.store)
}
inline ::StoreRequest* Request::_internal_mutable_store() {
  if (!_internal_has_store()) {
    clear_request();
    set_has_store();
    request_.store_ = CreateMaybeMessage< ::StoreRequest >(GetArena());
  }
  return request_.store_;
}
inline ::StoreRequest* Request::mutable_store() {
  // @@protoc_insertion_point(field_mutable:Request.store)
  return _internal_mutable_store();
}

// .FindNodeRequest findNode = 4;
inline bool Request::_internal_has_findnode() const {
  return request_case() == kFindNode;
}
inline bool Request::has_findnode() const {
  return _internal_has_findnode();
}
inline void Request::set_has_findnode() {
  _oneof_case_[0] = kFindNode;
}
inline void Request::clear_findnode() {
  if (_internal_has_findnode()) {
    if (GetArena() == nullptr) {
      delete request_.findnode_;
    }
    clear_has_request();
  }
}
inline ::FindNodeRequest* Request::release_findnode() {
  // @@protoc_insertion_point(field_release:Request.findNode)
  if (_internal_has_findnode()) {
    clear_has_request();
      ::FindNodeRequest* temp = request_.findnode_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    request_.findnode_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::FindNodeRequest& Request::_internal_findnode() const {
  return _internal_has_findnode()
      ? *request_.findnode_
      : reinterpret_cast< ::FindNodeRequest&>(::_FindNodeRequest_default_instance_);
}
inline const ::FindNodeRequest& Request::findnode() const {
  // @@protoc_insertion_point(field_get:Request.findNode)
  return _internal_findnode();
}
inline ::FindNodeRequest* Request::unsafe_arena_release_findnode() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Request.findNode)
  if (_internal_has_findnode()) {
    clear_has_request();
    ::FindNodeRequest* temp = request_.findnode_;
    request_.findnode_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_findnode(::FindNodeRequest* findnode) {
  clear_request();
  if (findnode) {
    set_has_findnode();
    request_.findnode_ = findnode;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Request.findNode)
}
inline ::FindNodeRequest* Request::_internal_mutable_findnode() {
  if (!_internal_has_findnode()) {
    clear_request();
    set_has_findnode();
    request_.findnode_ = CreateMaybeMessage< ::FindNodeRequest >(GetArena());
  }
  return request_.findnode_;
}
inline ::FindNodeRequest* Request::mutable_findnode() {
  // @@protoc_insertion_point(field_mutable:Request.findNode)
  return _internal_mutable_findnode();
}

// .FindValueRequest findValue = 5;
inline bool Request::_internal_has_findvalue() const {
  return request_case() == kFindValue;
}
inline bool Request::has_findvalue() const {
  return _internal_has_findvalue();
}
inline void Request::set_has_findvalue() {
  _oneof_case_[0] = kFindValue;
}
inline void Request::clear_findvalue() {
  if (_internal_has_findvalue()) {
    if (GetArena() == nullptr) {
      delete request_.findvalue_;
    }
    clear_has_request();
  }
}
inline ::FindValueRequest* Request::release_findvalue() {
  // @@protoc_insertion_point(field_release:Request.findValue)
  if (_internal_has_findvalue()) {
    clear_has_request();
      ::FindValueRequest* temp = request_.findvalue_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    request_.findvalue_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::FindValueRequest& Request::_internal_findvalue() const {
  return _internal_has_findvalue()
      ? *request_.findvalue_
      : reinterpret_cast< ::FindValueRequest&>(::_FindValueRequest_default_instance_);
}
inline const ::FindValueRequest& Request::findvalue() const {
  // @@protoc_insertion_point(field_get:Request.findValue)
  return _internal_findvalue();
}
inline ::FindValueRequest* Request::unsafe_arena_release_findvalue() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Request.findValue)
  if (_internal_has_findvalue()) {
    clear_has_request();
    ::FindValueRequest* temp = request_.findvalue_;
    request_.findvalue_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_findvalue(::FindValueRequest* findvalue) {
  clear_request();
  if (findvalue) {
    set_has_findvalue();
    request_.findvalue_ = findvalue;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Request.findValue)
}
inline ::FindValueRequest* Request::_internal_mutable_findvalue() {
  if (!_internal_has_findvalue()) {
    clear_request();
    set_has_findvalue();
    request_.findvalue_ = CreateMaybeMessage< ::FindValueRequest >(GetArena());
  }
  return request_.findvalue_;
}
inline ::FindValueRequest* Request::mutable_findvalue() {
  // @@protoc_insertion_point(field_mutable:Request.findValue)
  return _internal_mutable_findvalue();
}

inline bool Request::has_request() const {
  return request_case() != REQUEST_NOT_SET;
}
inline void Request::clear_has_request() {
  _oneof_case_[0] = REQUEST_NOT_SET;
}
inline Request::RequestCase Request::request_case() const {
  return Request::RequestCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// PingRequest

// int32 _placeholder = 1;
inline void PingRequest::clear__placeholder() {
  _placeholder_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PingRequest::_internal__placeholder() const {
  return _placeholder_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PingRequest::_placeholder() const {
  // @@protoc_insertion_point(field_get:PingRequest._placeholder)
  return _internal__placeholder();
}
inline void PingRequest::_internal_set__placeholder(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  _placeholder_ = value;
}
inline void PingRequest::set__placeholder(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set__placeholder(value);
  // @@protoc_insertion_point(field_set:PingRequest._placeholder)
}

// -------------------------------------------------------------------

// StoreRequest

// bytes key = 1;
inline void StoreRequest::clear_key() {
  key_.ClearToEmpty();
}
inline const std::string& StoreRequest::key() const {
  // @@protoc_insertion_point(field_get:StoreRequest.key)
  return _internal_key();
}
inline void StoreRequest::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:StoreRequest.key)
}
inline std::string* StoreRequest::mutable_key() {
  // @@protoc_insertion_point(field_mutable:StoreRequest.key)
  return _internal_mutable_key();
}
inline const std::string& StoreRequest::_internal_key() const {
  return key_.Get();
}
inline void StoreRequest::_internal_set_key(const std::string& value) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void StoreRequest::set_key(std::string&& value) {
  
  key_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:StoreRequest.key)
}
inline void StoreRequest::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:StoreRequest.key)
}
inline void StoreRequest::set_key(const void* value,
    size_t size) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:StoreRequest.key)
}
inline std::string* StoreRequest::_internal_mutable_key() {
  
  return key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* StoreRequest::release_key() {
  // @@protoc_insertion_point(field_release:StoreRequest.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StoreRequest::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:StoreRequest.key)
}

// string value = 2;
inline void StoreRequest::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& StoreRequest::value() const {
  // @@protoc_insertion_point(field_get:StoreRequest.value)
  return _internal_value();
}
inline void StoreRequest::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:StoreRequest.value)
}
inline std::string* StoreRequest::mutable_value() {
  // @@protoc_insertion_point(field_mutable:StoreRequest.value)
  return _internal_mutable_value();
}
inline const std::string& StoreRequest::_internal_value() const {
  return value_.Get();
}
inline void StoreRequest::_internal_set_value(const std::string& value) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void StoreRequest::set_value(std::string&& value) {
  
  value_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:StoreRequest.value)
}
inline void StoreRequest::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:StoreRequest.value)
}
inline void StoreRequest::set_value(const char* value,
    size_t size) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:StoreRequest.value)
}
inline std::string* StoreRequest::_internal_mutable_value() {
  
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* StoreRequest::release_value() {
  // @@protoc_insertion_point(field_release:StoreRequest.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StoreRequest::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:StoreRequest.value)
}

// -------------------------------------------------------------------

// FindNodeRequest

// bytes id = 1;
inline void FindNodeRequest::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& FindNodeRequest::id() const {
  // @@protoc_insertion_point(field_get:FindNodeRequest.id)
  return _internal_id();
}
inline void FindNodeRequest::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:FindNodeRequest.id)
}
inline std::string* FindNodeRequest::mutable_id() {
  // @@protoc_insertion_point(field_mutable:FindNodeRequest.id)
  return _internal_mutable_id();
}
inline const std::string& FindNodeRequest::_internal_id() const {
  return id_.Get();
}
inline void FindNodeRequest::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void FindNodeRequest::set_id(std::string&& value) {
  
  id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:FindNodeRequest.id)
}
inline void FindNodeRequest::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:FindNodeRequest.id)
}
inline void FindNodeRequest::set_id(const void* value,
    size_t size) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:FindNodeRequest.id)
}
inline std::string* FindNodeRequest::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* FindNodeRequest::release_id() {
  // @@protoc_insertion_point(field_release:FindNodeRequest.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FindNodeRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:FindNodeRequest.id)
}

// -------------------------------------------------------------------

// FindValueRequest

// bytes key = 1;
inline void FindValueRequest::clear_key() {
  key_.ClearToEmpty();
}
inline const std::string& FindValueRequest::key() const {
  // @@protoc_insertion_point(field_get:FindValueRequest.key)
  return _internal_key();
}
inline void FindValueRequest::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:FindValueRequest.key)
}
inline std::string* FindValueRequest::mutable_key() {
  // @@protoc_insertion_point(field_mutable:FindValueRequest.key)
  return _internal_mutable_key();
}
inline const std::string& FindValueRequest::_internal_key() const {
  return key_.Get();
}
inline void FindValueRequest::_internal_set_key(const std::string& value) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void FindValueRequest::set_key(std::string&& value) {
  
  key_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:FindValueRequest.key)
}
inline void FindValueRequest::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:FindValueRequest.key)
}
inline void FindValueRequest::set_key(const void* value,
    size_t size) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:FindValueRequest.key)
}
inline std::string* FindValueRequest::_internal_mutable_key() {
  
  return key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* FindValueRequest::release_key() {
  // @@protoc_insertion_point(field_release:FindValueRequest.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FindValueRequest::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:FindValueRequest.key)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_request_2eproto
